// Autogenerated Jamon implementation
// src/main/templates/com/exactpro/sf/messages/impl/templates/MessageStructureTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

import com.exactpro.sf.common.messages.structures.*;
// 16, 3
import com.exactpro.sf.common.util.CodeGenUtils;

public class MessageStructureTemplateImpl
  extends org.jamon.AbstractTemplateImpl
  implements com.exactpro.sf.messages.impl.templates.MessageStructureTemplate.Intf

{
  private final String[] distPackagePath;
  private final boolean underscoreAsPackageSeparator;
  private final String packageName;
  private final String typeName;
  private final String messageName;
  private final String namespaceName;
  private final java.util.Collection<IFieldStructure> fields;
  private final java.util.Map<String,IAttributeStructure> attributes;
  protected static com.exactpro.sf.messages.impl.templates.MessageStructureTemplate.ImplData __jamon_setOptionalArguments(com.exactpro.sf.messages.impl.templates.MessageStructureTemplate.ImplData p_implData)
  {
    return p_implData;
  }
  public MessageStructureTemplateImpl(org.jamon.TemplateManager p_templateManager, com.exactpro.sf.messages.impl.templates.MessageStructureTemplate.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    distPackagePath = p_implData.getDistPackagePath();
    underscoreAsPackageSeparator = p_implData.getUnderscoreAsPackageSeparator();
    packageName = p_implData.getPackageName();
    typeName = p_implData.getTypeName();
    messageName = p_implData.getMessageName();
    namespaceName = p_implData.getNamespaceName();
    fields = p_implData.getFields();
    attributes = p_implData.getAttributes();
  }

  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    jamonWriter.write("/*\n * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage ");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(packageName), jamonWriter);
    jamonWriter.write(";\n\nimport com.exactpro.sf.common.impl.messages.DefaultMessageFactory;\nimport com.exactpro.sf.common.impl.messages.BaseMessage;\nimport com.exactpro.sf.common.messages.IMessageFactory;\nimport com.exactpro.sf.common.messages.IMessage;\nimport com.exactpro.sf.common.messages.FieldNotFoundException;\nimport com.exactpro.sf.aml.scriptutil.StaticUtil.IFilter;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.lang.Deprecated;\n\n@SuppressWarnings(\"unused\")\npublic class ");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    jamonWriter.write(" extends BaseMessage\n{\n    public static final String MESSAGE_NAME = \"");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(messageName), jamonWriter);
    jamonWriter.write("\";\n\t");
    for (IAttributeStructure attr : attributes.values() )
    {
      jamonWriter.write("\n\t");

        String attrTypeName = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(attr.getType());
        String attrValue = CodeGenUtils.getStringValueView(attr.getType(), attr.getCastValue());

      jamonWriter.write("public static final ");
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(attrTypeName), jamonWriter);
      jamonWriter.write(" ");
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(attr.getName()), jamonWriter);
      jamonWriter.write(" = ");
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(attrValue), jamonWriter);
      jamonWriter.write(";\n\t");
    }
    jamonWriter.write("\n\n\tpublic ");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    jamonWriter.write("(IMessageFactory messageFactory)\n\t{\n\t\t this(messageFactory.createMessage(MESSAGE_NAME, (messageFactory.getNamespace() == null) ? \"");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(namespaceName), jamonWriter);
    jamonWriter.write("\" : messageFactory.getNamespace()));\n\t}\n\n\t/**\n\t * @deprecated Please use {@link #");
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    jamonWriter.write("(IMessageFactory)}\n\t */\n\t@Deprecated\n\tpublic ");
    // 72, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 72, 23
    jamonWriter.write("()\n\t{\n\t\tthis(DefaultMessageFactory.getFactory());\n\t}\n\n\t/**\n\t * @deprecated Please use {@link #");
    // 78, 36
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 78, 50
    jamonWriter.write("(IMessageFactory)}\n\t */\n\t@Deprecated\n    public ");
    // 81, 12
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 81, 26
    jamonWriter.write("(String name, String namespace)\n    {\n        super(DefaultMessageFactory.getFactory().createMessage(name, namespace));\n    }\n\n\tpublic ");
    // 86, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 86, 23
    jamonWriter.write("(IMessage msg)\n\t{\n\t\tsuper(msg);\n\t}\n\n    @Override\n    public ");
    // 92, 12
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 92, 26
    jamonWriter.write(" clone() {\n        return (");
    // 93, 17
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 93, 31
    jamonWriter.write(")super.clone();\n    }\n\n\t");
    // 96, 2
    for (String key : attributes.keySet() )
    {
      // 96, 43
      jamonWriter.write("\n\t\t");
      // 97, 3
      if ((key.equalsIgnoreCase("IsAdmin")))
      {
        // 97, 43
        jamonWriter.write("\n    \t\tpublic boolean isAdmin(){\n    \t\t\treturn ");
        // 99, 15
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(key), jamonWriter);
        // 99, 24
        jamonWriter.write(";\n    \t\t}\n    \t");
      }
      // 101, 12
      jamonWriter.write("\n    ");
    }
    // 102, 12
    jamonWriter.write("\n\n\t");
    // 104, 2
    if (( fields != null ) )
    {
      // 104, 28
      jamonWriter.write("\n\t\t");
      // 105, 3
      for (IFieldStructure field : fields )
      {
        // 105, 42
        jamonWriter.write("\n\t\t\t");
        // 106, 4

				String fieldTypeName = CodeGenUtils.getTypeName(field, distPackagePath, underscoreAsPackageSeparator);
				String methodCall = "";

        // 111, 4
        if (( field.isCollection() ) )
        {
          // 111, 36
          jamonWriter.write("\n\t\t\t\tpublic ");
          // 112, 12
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
          // 112, 26
          jamonWriter.write(" add");
          // 112, 30
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 112, 51
          jamonWriter.write("(");
          // 112, 52
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 112, 71
          jamonWriter.write(" value)\n\t\t\t\t{\n\t\t\t\t\t");
          // 114, 6

						String elType = "";
						if ( field.isComplex() ) {
							elType = "IMessage";
						}
						else
						{
							elType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
						}

          // 125, 6
          jamonWriter.write("List<");
          // 125, 11
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
          // 125, 23
          jamonWriter.write("> list = this.msg.<List<");
          // 125, 47
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
          // 125, 59
          jamonWriter.write(">>getField(\"");
          // 125, 71
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 125, 92
          jamonWriter.write("\");\n\t\n\t\t\t\t\tif (list == null) {\n\t\t\t\t\t\tlist = new ArrayList<");
          // 128, 28
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
          // 128, 40
          jamonWriter.write(">();\n\t\t\t\t\t\tthis.msg.addField(\"");
          // 129, 26
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 129, 47
          jamonWriter.write("\" ,list);\n\t\t\t\t\t}\n\t\n\t\t\t\t\t");
          // 132, 6
          if (( field.isComplex() ) )
          {
            // 132, 35
            jamonWriter.write("\n\t\t\t\t\tlist.add(value.getMessage());\n\t\t\t\t\treturn this;\n\t\t\t\t\t");
          }
          // 135, 6
          else if (( field.isEnum() ) )
          {
            // 135, 36
            jamonWriter.write("\n\t\t\t\t\tlist.add(value.getValue());\n\t\t\t\t\treturn this;\n\t\t\t\t\t");
          }
          // 138, 6
          else if (( field.isSimple() ) )
          {
            // 138, 38
            jamonWriter.write("\n\t\t\t\t\tlist.add(value);\n\t\t\t\t\treturn this;\n\t\t\t\t\t");
          }
          // 141, 6
          else
          {
            // 141, 13
            jamonWriter.write("\n\t\t\t\t\tthrow new EPSCommonException(\"Unknown type\");\n\t\t\t\t\t");
          }
          // 143, 12
          jamonWriter.write("\n\t\t\t\t}\n\t\n\t\t\t\tpublic List<");
          // 146, 17
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 146, 36
          jamonWriter.write("> get");
          // 146, 41
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 146, 62
          jamonWriter.write("()\n\t\t\t\t{\n\t\t\t\t\t");
          // 148, 6

						String elemType = "";
						if ( field.isComplex() ) {
							elemType = "IMessage";
						}
						else
						{
							elemType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
						}

          // 159, 21
          jamonWriter.write("List<");
          // 159, 26
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
          // 159, 40
          jamonWriter.write("> value = this.msg.<List<");
          // 159, 65
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
          // 159, 79
          jamonWriter.write(">>getField(\"");
          // 159, 91
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 159, 112
          jamonWriter.write("\");\n    \n                    if (value == null)\n                    {\n                        throw new FieldNotFoundException(\" ");
          // 163, 60
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 163, 81
          jamonWriter.write(" \");\n                    }\n    \n                    List<");
          // 166, 26
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 166, 45
          jamonWriter.write("> list = new ArrayList<");
          // 166, 68
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 166, 87
          jamonWriter.write(">();\n\t\n\t\t\t\t\t");
          // 168, 6

						if ( field.isEnum() )
						{
							String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
							methodCall =  fieldTypeName + ".getEnumValue((" + simpleJavaType + ")element)";
						}
						else if ( field.isComplex() )
						{
							methodCall = "new " + fieldTypeName + "((IMessage)element)";
						}
						else
						{
							String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
							methodCall = "(" + simpleJavaType + ")element";
						}

          // 185, 6
          jamonWriter.write("for ( ");
          // 185, 12
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
          // 185, 26
          jamonWriter.write(" element : value )\n\t\t\t\t\t{\n\t\t\t\t\t\tlist.add(");
          // 187, 16
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
          // 187, 32
          jamonWriter.write(");\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn list;\n\t\t\t\t}\n\t\t\t\t");
          // 192, 5
          if ((field.isEnum()) )
          {
            // 192, 29
            jamonWriter.write("\n                public List<");
            // 193, 29
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
            // 193, 43
            jamonWriter.write("> getRaw");
            // 193, 51
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 193, 72
            jamonWriter.write("()\n                {\n                    List<");
            // 195, 26
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
            // 195, 40
            jamonWriter.write("> value = this.msg.<List<");
            // 195, 65
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
            // 195, 79
            jamonWriter.write(">>getField(\"");
            // 195, 91
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 195, 112
            jamonWriter.write("\");\n\n                    if (value == null)\n                    {\n                        throw new FieldNotFoundException(\" ");
            // 199, 60
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 199, 81
            jamonWriter.write(" \");\n                    }\n\n                    return new ArrayList<>(value);\n                }\n                ");
          }
          // 204, 23
          jamonWriter.write("\n\n                ");
          // 206, 17
          if ((!field.isComplex()) )
          {
            // 206, 45
            jamonWriter.write("\n                public List<?> getUntyped");
            // 207, 42
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 207, 63
            jamonWriter.write("()\n                {\n                    List<?> values = this.msg.getField(\"");
            // 209, 57
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 209, 78
            jamonWriter.write("\");\n\n                    if (values == null)\n                    {\n                        throw new FieldNotFoundException(\" ");
            // 213, 60
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 213, 81
            jamonWriter.write(" \");\n                    }\n\n                    List<Object> result = new ArrayList<>(values.size());\n                    result.addAll(values);\n                    return result;\n                }\n                ");
          }
          // 220, 23
          jamonWriter.write("\n\t\n\t\t\t");
        }
        // 222, 4
        else
        {
          // 222, 11
          jamonWriter.write("\n\t\t\t\tpublic ");
          // 223, 12
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
          // 223, 26
          jamonWriter.write(" set");
          // 223, 30
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 223, 51
          jamonWriter.write("(");
          // 223, 52
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 223, 71
          jamonWriter.write(" value)\n\t\t\t\t{\n\t\t\t\t\t");
          // 225, 6

						if ( field.isEnum() ) {
							methodCall = ".getValue()";
						}
						else if ( field.isComplex() ) {
							if (!field.isCollection()) {
								methodCall = ".getMessage()";
							}
						} else {
							methodCall = "";
						}

          // 238, 6
          jamonWriter.write("this.msg.addField(\"");
          // 238, 25
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 238, 46
          jamonWriter.write("\", value");
          // 238, 54
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
          // 238, 70
          jamonWriter.write(");\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\n\t\t\t\t");
          // 242, 5
          if ((field.isEnum()) )
          {
            // 242, 29
            jamonWriter.write("\n\t\t\t\t\t");
            // 243, 6

						String valueType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());

            // 246, 6
            jamonWriter.write("public ");
            // 246, 13
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
            // 246, 27
            jamonWriter.write(" set");
            // 246, 31
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 246, 52
            jamonWriter.write("(");
            // 246, 53
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(valueType), jamonWriter);
            // 246, 68
            jamonWriter.write(" value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.msg.addField(\"");
            // 248, 26
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 248, 47
            jamonWriter.write("\", value);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t}\n\n                    public ");
            // 252, 28
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(valueType), jamonWriter);
            // 252, 43
            jamonWriter.write(" getRaw");
            // 252, 50
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 252, 71
            jamonWriter.write("()\n                    {\n                        ");
            // 254, 25
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(valueType), jamonWriter);
            // 254, 40
            jamonWriter.write(" value = this.msg.getField(\"");
            // 254, 68
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 254, 89
            jamonWriter.write("\");\n                        if (value == null)\n                        {\n                            throw new FieldNotFoundException(\" ");
            // 257, 64
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 257, 85
            jamonWriter.write(" \");\n                        }\n                        return value;\n                    }\n\t\t\t\t");
          }
          // 261, 11
          jamonWriter.write("\n\t\n\t\t\t\tpublic ");
          // 263, 12
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
          // 263, 31
          jamonWriter.write(" get");
          // 263, 35
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 263, 56
          jamonWriter.write("()\n\t\t\t\t{\n\t\t\t\t\tObject value = this.msg.getField(\"");
          // 265, 40
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
          // 265, 61
          jamonWriter.write("\");\n\t\n\t\t\t\t\t");
          // 267, 6
          if ((!field.isComplex())
							&& !(field.isEnum())
							&& CodeGenUtils.isPrimitive( field.getJavaType() ) )
          {
            // 269, 61
            jamonWriter.write("\n\t\t\t\t\t\tif(value == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthrow new FieldNotFoundException(\" ");
            // 272, 43
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 272, 64
            jamonWriter.write(" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t");
          }
          // 274, 12
          jamonWriter.write("\n\t\n\t\t\t\t\t");
          // 276, 6

						if ( field.isEnum() )
						{
							String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
							methodCall =  fieldTypeName + ".getEnumValue((" + simpleJavaType + ")value)";
						}
						else if ( field.isComplex() )
						{
							methodCall = "new " + fieldTypeName + "((IMessage)value)";
						}
						else
						{
							String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
							methodCall = "(" + simpleJavaType + ")value";
						}

          // 293, 6
          jamonWriter.write("return ");
          // 293, 13
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
          // 293, 29
          jamonWriter.write(";\n\t\t\t\t}\n\n                ");
          // 296, 17
          if ((!field.isComplex()) )
          {
            // 296, 45
            jamonWriter.write("\n                public Object getUntyped");
            // 297, 41
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 297, 62
            jamonWriter.write("()\n                {\n                    return this.msg.getField(\"");
            // 299, 47
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
            // 299, 68
            jamonWriter.write("\");\n                }\n                ");
          }
          // 301, 23
          jamonWriter.write("\n\t\t\t");
        }
        // 302, 10
        jamonWriter.write("\n\t\t\t\n            public IFilter get");
        // 304, 31
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 304, 52
        jamonWriter.write("Filter()\n            {\n                return this.msg.getField(\"");
        // 306, 43
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 306, 64
        jamonWriter.write("\");\n            }\n\n            public ");
        // 309, 20
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
        // 309, 34
        jamonWriter.write(" set");
        // 309, 38
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 309, 59
        jamonWriter.write("Filter(IFilter filter)\n            {\n                this.msg.addField(\"");
        // 311, 36
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 311, 57
        jamonWriter.write("\", filter);\n                return this;\n            }\n\n            public ");
        // 315, 20
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
        // 315, 34
        jamonWriter.write(" remove");
        // 315, 41
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 315, 62
        jamonWriter.write("()\n            {\n                this.msg.removeField(\"");
        // 317, 39
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 317, 60
        jamonWriter.write("\");\n                return this;\n            }\n\n\t\t\tpublic boolean isSet");
        // 321, 24
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 321, 45
        jamonWriter.write("()\n\t\t\t{\n\t\t\t\treturn this.msg.getField(\"");
        // 323, 31
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 323, 52
        jamonWriter.write("\") != null;\n\t\t\t}\n\n            public boolean isFilter");
        // 326, 36
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 326, 57
        jamonWriter.write("()\n            {\n                return this.msg.getField(\"");
        // 328, 43
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 328, 64
        jamonWriter.write("\") instanceof IFilter;\n            }\n\t\t");
      }
      jamonWriter.write("\n\t");
    }
    jamonWriter.write("\n}\n");
  }

}
