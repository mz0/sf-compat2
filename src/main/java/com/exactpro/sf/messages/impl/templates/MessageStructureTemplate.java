// Autogenerated Jamon proxy
// /home/mz0/e/sf-compat2/src/main/templates/com/exactpro/sf/messages/impl/templates/MessageStructureTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

// 15, 3
import com.exactpro.sf.common.messages.structures.*;
// 16, 3
import com.exactpro.sf.common.util.CodeGenUtils;

@org.jamon.annotations.Template(
  signature = "3285FEC22FB370B57CB9E3497B770F8B",
  requiredArguments = {
    @org.jamon.annotations.Argument(name = "distPackagePath", type = "String[]"),
    @org.jamon.annotations.Argument(name = "underscoreAsPackageSeparator", type = "boolean"),
    @org.jamon.annotations.Argument(name = "packageName", type = "String"),
    @org.jamon.annotations.Argument(name = "typeName", type = "String"),
    @org.jamon.annotations.Argument(name = "messageName", type = "String"),
    @org.jamon.annotations.Argument(name = "namespaceName", type = "String"),
    @org.jamon.annotations.Argument(name = "fields", type = "java.util.Collection<IFieldStructure>"),
    @org.jamon.annotations.Argument(name = "attributes", type = "java.util.Map<String,IAttributeStructure>")})
public class MessageStructureTemplate
  extends org.jamon.AbstractTemplateProxy
{
  
  public MessageStructureTemplate(org.jamon.TemplateManager p_manager)
  {
     super(p_manager);
  }
  
  protected MessageStructureTemplate(String p_path)
  {
    super(p_path);
  }
  
  public MessageStructureTemplate()
  {
     super("/com/exactpro/sf/messages/impl/templates/MessageStructureTemplate");
  }
  
  public interface Intf
    extends org.jamon.AbstractTemplateProxy.Intf
  {
    
    void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    
  }
  public static class ImplData
    extends org.jamon.AbstractTemplateProxy.ImplData
  {
    // 4, 3
    public void setDistPackagePath(String[] distPackagePath)
    {
      // 4, 3
      m_distPackagePath = distPackagePath;
    }
    public String[] getDistPackagePath()
    {
      return m_distPackagePath;
    }
    private String[] m_distPackagePath;
    // 5, 3
    public void setUnderscoreAsPackageSeparator(boolean underscoreAsPackageSeparator)
    {
      // 5, 3
      m_underscoreAsPackageSeparator = underscoreAsPackageSeparator;
    }
    public boolean getUnderscoreAsPackageSeparator()
    {
      return m_underscoreAsPackageSeparator;
    }
    private boolean m_underscoreAsPackageSeparator;
    // 6, 3
    public void setPackageName(String packageName)
    {
      // 6, 3
      m_packageName = packageName;
    }
    public String getPackageName()
    {
      return m_packageName;
    }
    private String m_packageName;
    // 7, 3
    public void setTypeName(String typeName)
    {
      // 7, 3
      m_typeName = typeName;
    }
    public String getTypeName()
    {
      return m_typeName;
    }
    private String m_typeName;
    // 8, 3
    public void setMessageName(String messageName)
    {
      // 8, 3
      m_messageName = messageName;
    }
    public String getMessageName()
    {
      return m_messageName;
    }
    private String m_messageName;
    // 9, 3
    public void setNamespaceName(String namespaceName)
    {
      // 9, 3
      m_namespaceName = namespaceName;
    }
    public String getNamespaceName()
    {
      return m_namespaceName;
    }
    private String m_namespaceName;
    // 10, 3
    public void setFields(java.util.Collection<IFieldStructure> fields)
    {
      // 10, 3
      m_fields = fields;
    }
    public java.util.Collection<IFieldStructure> getFields()
    {
      return m_fields;
    }
    private java.util.Collection<IFieldStructure> m_fields;
    // 11, 3
    public void setAttributes(java.util.Map<String,IAttributeStructure> attributes)
    {
      // 11, 3
      m_attributes = attributes;
    }
    public java.util.Map<String,IAttributeStructure> getAttributes()
    {
      return m_attributes;
    }
    private java.util.Map<String,IAttributeStructure> m_attributes;
  }
  @Override
  protected org.jamon.AbstractTemplateProxy.ImplData makeImplData()
  {
    return new ImplData();
  }
  @Override public ImplData getImplData()
  {
    return (ImplData) super.getImplData();
  }
  
  
  @Override
  public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class){
    try
    {
      return p_class
        .getConstructor(new Class [] { org.jamon.TemplateManager.class, ImplData.class })
        .newInstance(new Object [] { getTemplateManager(), getImplData()});
    }
    catch (RuntimeException e)
    {
      throw e;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  
  @Override
  protected org.jamon.AbstractTemplateImpl constructImpl(){
    return new MessageStructureTemplateImpl(getTemplateManager(), getImplData());
  }
  public org.jamon.Renderer makeRenderer(final String[] distPackagePath, final boolean underscoreAsPackageSeparator, final String packageName, final String typeName, final String messageName, final String namespaceName, final java.util.Collection<IFieldStructure> fields, final java.util.Map<String,IAttributeStructure> attributes)
  {
    return new org.jamon.AbstractRenderer() {
      @Override
      public void renderTo(final java.io.Writer jamonWriter)
        throws java.io.IOException
      {
        render(jamonWriter, distPackagePath, underscoreAsPackageSeparator, packageName, typeName, messageName, namespaceName, fields, attributes);
      }
    };
  }
  
  public void render(final java.io.Writer jamonWriter, final String[] distPackagePath, final boolean underscoreAsPackageSeparator, final String packageName, final String typeName, final String messageName, final String namespaceName, final java.util.Collection<IFieldStructure> fields, final java.util.Map<String,IAttributeStructure> attributes)
    throws java.io.IOException
  {
    renderNoFlush(jamonWriter, distPackagePath, underscoreAsPackageSeparator, packageName, typeName, messageName, namespaceName, fields, attributes);
    jamonWriter.flush();
  }
  public void renderNoFlush(final java.io.Writer jamonWriter, final String[] distPackagePath, final boolean underscoreAsPackageSeparator, final String packageName, final String typeName, final String messageName, final String namespaceName, final java.util.Collection<IFieldStructure> fields, final java.util.Map<String,IAttributeStructure> attributes)
    throws java.io.IOException
  {
    ImplData implData = getImplData();
    implData.setDistPackagePath(distPackagePath);
    implData.setUnderscoreAsPackageSeparator(underscoreAsPackageSeparator);
    implData.setPackageName(packageName);
    implData.setTypeName(typeName);
    implData.setMessageName(messageName);
    implData.setNamespaceName(namespaceName);
    implData.setFields(fields);
    implData.setAttributes(attributes);
    Intf instance = (Intf) getTemplateManager().constructImpl(this);
    instance.renderNoFlush(jamonWriter);
    reset();
  }
  
  
}
