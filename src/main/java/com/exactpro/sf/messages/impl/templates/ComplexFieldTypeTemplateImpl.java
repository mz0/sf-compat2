// Autogenerated Jamon implementation
// /home/mz0/e/sf-compat2/src/main/templates/com/exactpro/sf/messages/impl/templates/ComplexFieldTypeTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

// 13, 3
import com.exactpro.sf.common.impl.messages.BaseMessage;
// 14, 3
import com.exactpro.sf.common.messages.structures.*;
// 15, 3
import com.exactpro.sf.common.util.CodeGenUtils;

public class ComplexFieldTypeTemplateImpl
  extends org.jamon.AbstractTemplateImpl
  implements com.exactpro.sf.messages.impl.templates.ComplexFieldTypeTemplate.Intf

{
  private final String[] distPackagePath;
  private final boolean underscoreAsPackageSeparator;
  private final String packageName;
  private final String typeName;
  private final String namespaceName;
  private final java.util.List<IFieldStructure> fields;
  protected static com.exactpro.sf.messages.impl.templates.ComplexFieldTypeTemplate.ImplData __jamon_setOptionalArguments(com.exactpro.sf.messages.impl.templates.ComplexFieldTypeTemplate.ImplData p_implData)
  {
    return p_implData;
  }
  public ComplexFieldTypeTemplateImpl(org.jamon.TemplateManager p_templateManager, com.exactpro.sf.messages.impl.templates.ComplexFieldTypeTemplate.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    distPackagePath = p_implData.getDistPackagePath();
    underscoreAsPackageSeparator = p_implData.getUnderscoreAsPackageSeparator();
    packageName = p_implData.getPackageName();
    typeName = p_implData.getTypeName();
    namespaceName = p_implData.getNamespaceName();
    fields = p_implData.getFields();
  }
  
  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 18, 1
    jamonWriter.write("/******************************************************************************\n * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage ");
    // 33, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(packageName), jamonWriter);
    // 33, 26
    jamonWriter.write(";\n\nimport com.exactpro.sf.common.impl.messages.DefaultMessageFactory;\nimport com.exactpro.sf.common.impl.messages.BaseMessage;\nimport com.exactpro.sf.common.messages.IMessage;\nimport com.exactpro.sf.common.messages.FieldNotFoundException;\nimport com.exactpro.sf.aml.scriptutil.StaticUtil.IFilter;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SuppressWarnings(\"unused\")\npublic class ");
    // 49, 14
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 49, 28
    jamonWriter.write(" extends BaseMessage\n{\n\n\tpublic ");
    // 52, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 52, 23
    jamonWriter.write("()\n\t{\n\t\tsuper(DefaultMessageFactory.getFactory().createMessage(\"");
    // 54, 59
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 54, 73
    jamonWriter.write("\", \"");
    // 54, 77
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(namespaceName), jamonWriter);
    // 54, 96
    jamonWriter.write("\"));\n\t}\n\n    public ");
    // 57, 12
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 57, 26
    jamonWriter.write("(String name, String namespace)\n    {\n        super(DefaultMessageFactory.getFactory().createMessage(name, namespace));\n    }\n\n\tpublic ");
    // 62, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 62, 23
    jamonWriter.write("(IMessage msg)\n\t{\n\t\tsuper(msg);\n\t}\n\n    @Override\n    public ");
    // 68, 12
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 68, 26
    jamonWriter.write(" clone() {\n        return (");
    // 69, 17
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
    // 69, 31
    jamonWriter.write(")super.clone();\n    }\n\n\t");
    // 72, 2
    for (int i = 0; i < fields.size(); ++i )
    {
      // 72, 44
      jamonWriter.write("\n\t");
      // 73, 2
      
		IFieldStructure field = fields.get(i);
		String fieldTypeName = CodeGenUtils.getTypeName(field, distPackagePath, underscoreAsPackageSeparator);
		String methodCall = "";
	
      // 79, 2
      if (( field.isCollection() ) )
      {
        // 79, 34
        jamonWriter.write("\n\t\t\tpublic ");
        // 80, 11
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
        // 80, 25
        jamonWriter.write(" add");
        // 80, 29
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 80, 50
        jamonWriter.write("(");
        // 80, 51
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 80, 70
        jamonWriter.write(" value)\n\t\t\t{\n\t\t\t\t");
        // 82, 5
        
					String elType = "";
					if ( field.isComplex() ) {
						elType = "IMessage";
					}
					else
					{
						elType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
					}
				
        // 93, 5
        jamonWriter.write("List<");
        // 93, 10
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
        // 93, 22
        jamonWriter.write("> list = this.msg.<List<");
        // 93, 46
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
        // 93, 58
        jamonWriter.write(">>getField(\"");
        // 93, 70
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 93, 91
        jamonWriter.write("\");\n\n\t\t\t\tif(list == null){\n\t\t\t\t\tlist = new ArrayList<");
        // 96, 27
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elType), jamonWriter);
        // 96, 39
        jamonWriter.write(">();\n\t\t\t\t\tthis.msg.addField(\"");
        // 97, 25
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 97, 46
        jamonWriter.write("\" ,list);\n\t\t\t\t}\n\n\t\t\t\t");
        // 100, 5
        if (( field.isComplex() ) )
        {
          // 100, 34
          jamonWriter.write("\n\t\t\t\t\tlist.add(value.getMessage());\n\t\t\t\t\treturn this;\n\t\t\t\t");
        }
        // 103, 5
        else if (( field.isEnum() ) )
        {
          // 103, 35
          jamonWriter.write("\n\t\t\t\t\tlist.add(value.getValue());\n\t\t\t\t\treturn this;\n\t\t\t\t");
        }
        // 106, 5
        else if (( field.isSimple() ) )
        {
          // 106, 37
          jamonWriter.write("\n\t\t\t\t\tlist.add(value);\n\t\t\t\t\treturn this;\n\t\t\t\t");
        }
        // 109, 5
        else
        {
          // 109, 12
          jamonWriter.write("\n\t\t\t\t\tthrow new EPSCommonException(\"Unknown type\");\n\t\t\t\t");
        }
        // 111, 11
        jamonWriter.write("\n\t\t\t}\n\n\t\t\tpublic List<");
        // 114, 16
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 114, 35
        jamonWriter.write("> get");
        // 114, 40
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 114, 61
        jamonWriter.write("()\n\t\t\t{\n\t\t\t\t");
        // 116, 5
        
					String elemType = "";
					if ( field.isComplex() ) {
						elemType = "IMessage";
					}
					else
					{
						elemType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
					}
				
        // 127, 17
        jamonWriter.write("List<");
        // 127, 22
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
        // 127, 36
        jamonWriter.write("> value = this.msg.<List<");
        // 127, 61
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
        // 127, 75
        jamonWriter.write(">>getField(\"");
        // 127, 87
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 127, 108
        jamonWriter.write("\");\n\n                if(value == null)\n                {\n                    throw new FieldNotFoundException(\" ");
        // 131, 56
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 131, 77
        jamonWriter.write(" \");\n                }\n\n                List<");
        // 134, 22
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 134, 41
        jamonWriter.write("> list = new ArrayList<");
        // 134, 64
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 134, 83
        jamonWriter.write(">();\n\n\t\t\t\t");
        // 136, 5
        
					if ( field.isEnum() )
					{
						String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
						methodCall =  fieldTypeName + ".getEnumValue((" + simpleJavaType + ")element)";
					}
					else if ( field.isComplex() )
					{
						methodCall = "new " + fieldTypeName + "((IMessage)element)";
					}
					else
					{
						String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
						methodCall = "(" + simpleJavaType + ")element";
					}
				
        // 153, 5
        jamonWriter.write("for( ");
        // 153, 10
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemType), jamonWriter);
        // 153, 24
        jamonWriter.write(" element : value )\n\t\t\t\t{\n\t\t\t\t\tlist.add(");
        // 155, 15
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
        // 155, 31
        jamonWriter.write(");\n\t\t\t\t}\n\n\t\t\t\treturn list;\n\t\t\t}\n\t");
      }
      // 160, 2
      else
      {
        // 160, 9
        jamonWriter.write("\n\n\tpublic ");
        // 162, 9
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 162, 28
        jamonWriter.write(" get");
        // 162, 32
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 162, 53
        jamonWriter.write("()\n\t{\n\t\tObject value = this.msg.getField(\"");
        // 164, 37
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 164, 58
        jamonWriter.write("\");\n\n\t\tif(value == null)\n\t\t{\n\t\t\tthrow new FieldNotFoundException(\" ");
        // 168, 39
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 168, 60
        jamonWriter.write(" \");\n\t\t}\n\n\t\t");
        // 171, 3
        
			if ( field.isEnum() )
			{
				String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
				methodCall =  fieldTypeName + ".getEnumValue((" + simpleJavaType + ")value)";
			}
			else if ( field.isComplex() )
			{
				methodCall = "(" + fieldTypeName + ")value";
			}
			else
			{
				String simpleJavaType = CodeGenUtils.convertSimpleFieldTypeToJavaObjectType(field.getJavaType());
				methodCall = "(" + simpleJavaType + ")value";
			}
		
        // 188, 3
        jamonWriter.write("return ");
        // 188, 10
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
        // 188, 26
        jamonWriter.write(";\n\t}\n\n\tpublic ");
        // 191, 9
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
        // 191, 23
        jamonWriter.write(" set");
        // 191, 27
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 191, 48
        jamonWriter.write("(");
        // 191, 49
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(fieldTypeName), jamonWriter);
        // 191, 68
        jamonWriter.write(" value)\n\t{\n\t\t");
        // 193, 3
        

			if ( field.isEnum() ){
				methodCall = ".getValue()";
			}
			else if ( field.isComplex() ){
				if(!field.isCollection()){
					methodCall = ".getMessage()";
				}
			} else {
				methodCall = "";
			}
		
        // 207, 3
        jamonWriter.write("this.msg.addField(\"");
        // 207, 22
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
        // 207, 43
        jamonWriter.write("\", value");
        // 207, 51
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(methodCall), jamonWriter);
        // 207, 67
        jamonWriter.write(");\n\t\treturn this;\n\t}\n\t");
      }
      // 210, 8
      jamonWriter.write("\n\n    public IFilter get");
      // 212, 23
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 212, 44
      jamonWriter.write("Filter()\n    {\n        return this.msg.getField(\"");
      // 214, 35
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 214, 56
      jamonWriter.write("\");\n    }\n\n    public ");
      // 217, 12
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
      // 217, 26
      jamonWriter.write(" set");
      // 217, 30
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 217, 51
      jamonWriter.write("Filter(IFilter filter)\n    {\n        this.msg.addField(\"");
      // 219, 28
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 219, 49
      jamonWriter.write("\", filter);\n        return this;\n    }\n\n    public ");
      // 223, 12
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(typeName), jamonWriter);
      // 223, 26
      jamonWriter.write(" remove");
      // 223, 33
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 223, 54
      jamonWriter.write("()\n    {\n        this.msg.removeField(\"");
      // 225, 31
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 225, 52
      jamonWriter.write("\");\n        return this;\n    }\n\n\tpublic boolean isSet");
      // 229, 22
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 229, 43
      jamonWriter.write("()\n\t{\n\t\treturn this.msg.getField(\"");
      // 231, 29
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 231, 50
      jamonWriter.write("\") != null;\n\t}\n\t\n\tpublic boolean isFilter");
      // 234, 25
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 234, 46
      jamonWriter.write("()\n    {\n        return this.msg.getField(\"");
      // 236, 35
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(field.getName()), jamonWriter);
      // 236, 56
      jamonWriter.write("\") instanceof IFilter;\n    }\n\t");
    }
    // 238, 9
    jamonWriter.write("\n}");
  }
  
  
}
