// Autogenerated Jamon proxy
// /home/mz0/e/sf-compat2/src/main/templates/com/exactpro/sf/messages/impl/templates/EnumFieldTypeTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

// 13, 3
import java.util.Map;
// 14, 3
import java.util.Iterator;
// 15, 3
import com.exactpro.sf.common.messages.structures.IAttributeStructure;
// 16, 3
import com.exactpro.sf.common.impl.messages.IBaseEnumField;

@org.jamon.annotations.Template(
  signature = "4B7AF8E01455485D5DCA695A31730003",
  requiredArguments = {
    @org.jamon.annotations.Argument(name = "packageName", type = "String"),
    @org.jamon.annotations.Argument(name = "enumName", type = "String"),
    @org.jamon.annotations.Argument(name = "elemTypeName", type = "String"),
    @org.jamon.annotations.Argument(name = "elemObjectTypeName", type = "String"),
    @org.jamon.annotations.Argument(name = "isPrimitive", type = "boolean"),
    @org.jamon.annotations.Argument(name = "values", type = "Map<String,IAttributeStructure>")})
public class EnumFieldTypeTemplate
  extends org.jamon.AbstractTemplateProxy
{
  
  public EnumFieldTypeTemplate(org.jamon.TemplateManager p_manager)
  {
     super(p_manager);
  }
  
  protected EnumFieldTypeTemplate(String p_path)
  {
    super(p_path);
  }
  
  public EnumFieldTypeTemplate()
  {
     super("/com/exactpro/sf/messages/impl/templates/EnumFieldTypeTemplate");
  }
  
  public interface Intf
    extends org.jamon.AbstractTemplateProxy.Intf
  {
    
    void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    
  }
  public static class ImplData
    extends org.jamon.AbstractTemplateProxy.ImplData
  {
    // 4, 3
    public void setPackageName(String packageName)
    {
      // 4, 3
      m_packageName = packageName;
    }
    public String getPackageName()
    {
      return m_packageName;
    }
    private String m_packageName;
    // 5, 3
    public void setEnumName(String enumName)
    {
      // 5, 3
      m_enumName = enumName;
    }
    public String getEnumName()
    {
      return m_enumName;
    }
    private String m_enumName;
    // 6, 3
    public void setElemTypeName(String elemTypeName)
    {
      // 6, 3
      m_elemTypeName = elemTypeName;
    }
    public String getElemTypeName()
    {
      return m_elemTypeName;
    }
    private String m_elemTypeName;
    // 7, 3
    public void setElemObjectTypeName(String elemObjectTypeName)
    {
      // 7, 3
      m_elemObjectTypeName = elemObjectTypeName;
    }
    public String getElemObjectTypeName()
    {
      return m_elemObjectTypeName;
    }
    private String m_elemObjectTypeName;
    // 8, 3
    public void setIsPrimitive(boolean isPrimitive)
    {
      // 8, 3
      m_isPrimitive = isPrimitive;
    }
    public boolean getIsPrimitive()
    {
      return m_isPrimitive;
    }
    private boolean m_isPrimitive;
    // 9, 3
    public void setValues(Map<String,IAttributeStructure> values)
    {
      // 9, 3
      m_values = values;
    }
    public Map<String,IAttributeStructure> getValues()
    {
      return m_values;
    }
    private Map<String,IAttributeStructure> m_values;
  }
  @Override
  protected org.jamon.AbstractTemplateProxy.ImplData makeImplData()
  {
    return new ImplData();
  }
  @Override public ImplData getImplData()
  {
    return (ImplData) super.getImplData();
  }
  
  
  @Override
  public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class){
    try
    {
      return p_class
        .getConstructor(new Class [] { org.jamon.TemplateManager.class, ImplData.class })
        .newInstance(new Object [] { getTemplateManager(), getImplData()});
    }
    catch (RuntimeException e)
    {
      throw e;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  
  @Override
  protected org.jamon.AbstractTemplateImpl constructImpl(){
    return new EnumFieldTypeTemplateImpl(getTemplateManager(), getImplData());
  }
  public org.jamon.Renderer makeRenderer(final String packageName, final String enumName, final String elemTypeName, final String elemObjectTypeName, final boolean isPrimitive, final Map<String,IAttributeStructure> values)
  {
    return new org.jamon.AbstractRenderer() {
      @Override
      public void renderTo(final java.io.Writer jamonWriter)
        throws java.io.IOException
      {
        render(jamonWriter, packageName, enumName, elemTypeName, elemObjectTypeName, isPrimitive, values);
      }
    };
  }
  
  public void render(final java.io.Writer jamonWriter, final String packageName, final String enumName, final String elemTypeName, final String elemObjectTypeName, final boolean isPrimitive, final Map<String,IAttributeStructure> values)
    throws java.io.IOException
  {
    renderNoFlush(jamonWriter, packageName, enumName, elemTypeName, elemObjectTypeName, isPrimitive, values);
    jamonWriter.flush();
  }
  public void renderNoFlush(final java.io.Writer jamonWriter, final String packageName, final String enumName, final String elemTypeName, final String elemObjectTypeName, final boolean isPrimitive, final Map<String,IAttributeStructure> values)
    throws java.io.IOException
  {
    ImplData implData = getImplData();
    implData.setPackageName(packageName);
    implData.setEnumName(enumName);
    implData.setElemTypeName(elemTypeName);
    implData.setElemObjectTypeName(elemObjectTypeName);
    implData.setIsPrimitive(isPrimitive);
    implData.setValues(values);
    Intf instance = (Intf) getTemplateManager().constructImpl(this);
    instance.renderNoFlush(jamonWriter);
    reset();
  }
  
  
}
