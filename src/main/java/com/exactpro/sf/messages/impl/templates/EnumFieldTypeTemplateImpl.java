// Autogenerated Jamon implementation
// src/main/templates/com/exactpro/sf/messages/impl/templates/EnumFieldTypeTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

import java.util.Map;
import java.util.Iterator;
import com.exactpro.sf.common.messages.structures.IAttributeStructure;
import com.exactpro.sf.common.impl.messages.IBaseEnumField;

public class EnumFieldTypeTemplateImpl
	extends org.jamon.AbstractTemplateImpl
	implements com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.Intf

{
	private final String packageName;
	private final String enumName;
	private final String elemTypeName;
	private final String elemObjectTypeName;
	private final boolean isPrimitive;
	private final Map<String,IAttributeStructure> values;
	protected static com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData __jamon_setOptionalArguments(com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData p_implData)
	{
		return p_implData;
	}
	public EnumFieldTypeTemplateImpl(org.jamon.TemplateManager p_templateManager, com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData p_implData)
	{
		super(p_templateManager, __jamon_setOptionalArguments(p_implData));
		packageName = p_implData.getPackageName();
		enumName = p_implData.getEnumName();
		elemTypeName = p_implData.getElemTypeName();
		elemObjectTypeName = p_implData.getElemObjectTypeName();
		isPrimitive = p_implData.getIsPrimitive();
		values = p_implData.getValues();
	}

	@Override public void renderNoFlush(final java.io.Writer jamonWriter)
		throws java.io.IOException
	{
		jamonWriter.write("/*\n * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(packageName), jamonWriter);
		jamonWriter.write(";\n\nimport java.math.BigDecimal;\n\nimport com.exactpro.sf.common.impl.messages.IBaseEnumField;\nimport com.exactpro.sf.common.util.EPSCommonException;\n\npublic enum ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
		jamonWriter.write(" implements IBaseEnumField\n{\n\t");

		String quote = "";
		if (elemTypeName.equals("String")) {
			quote="\"";
		} else if (elemTypeName.equals("char")) {
			quote="'";
		}

	String present = "Byte.MAX_VALUE";
	String missed = "Byte.MIN_VALUE";
	if (elemTypeName.equals("String")) {
		present = "*";
		missed = "#";
	} else if (elemTypeName.equals("char")) {
		present = "\000";
		missed = "\001";
	} else if (elemTypeName.equals("byte")) {
		present = "Byte.MAX_VALUE";
		missed = "Byte.MIN_VALUE";
	} else if (elemTypeName.equals("int")) {
		present = "-999";
		missed = "-998";
	} else if (elemTypeName.equals("long")) {
		present = "-999l";
		missed = "-998L";
	} else if (elemTypeName.equals("short")) {
		present = "Short.MAX_VALUE";
		missed = "Short.MIN_VALUE";
	} else if (elemTypeName.equals("double")) {
		present = "-999.0";
		missed = "-998.0";
	} else if (elemTypeName.equals("float")) {
		present = "-999.0f";
		missed = "-998.0f";
	} else if (elemTypeName.equals("BigDecimal")) {
				present = "new BigDecimal(-999)";
				missed = "new BigDecimal(-998)";
		}
	Iterator<String> it = values.keySet().iterator();

		if (!elemTypeName.equalsIgnoreCase("boolean") )
		{
			jamonWriter.write("\n\t");
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(IBaseEnumField.PRESENT), jamonWriter);
			jamonWriter.write("(");
			if (isPrimitive == true)
			{
				jamonWriter.write("(");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
				jamonWriter.write(") ");
			}
			jamonWriter.write(" ");
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			jamonWriter.write("),\n\t\n\t");
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(IBaseEnumField.MISSED), jamonWriter);
			jamonWriter.write("(");
			if (isPrimitive == true)
			{
				jamonWriter.write("(");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
				jamonWriter.write(") ");
			}
			jamonWriter.write(" ");
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			jamonWriter.write("),\n\t");
		}
		jamonWriter.write("\n\t\n\t");
		while (it.hasNext() )
		{
			jamonWriter.write("\n\t");
			String value = it.next(); Object castValue = values.get(value).getCastValue(); if(elemTypeName.equals("BigDecimal")) castValue = "new BigDecimal(\"" + castValue + "\")";
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(value), jamonWriter);
			jamonWriter.write("(");
			if (isPrimitive == true)
			{
				jamonWriter.write("(");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
				jamonWriter.write(")");
			}
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
			jamonWriter.write(")");
			if (it.hasNext() )
			{
				jamonWriter.write(",");
			}
			else
			{
				jamonWriter.write(";");
			}
			jamonWriter.write("\n\t");
		}
		jamonWriter.write("\t\n\n\tprivate final ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
		jamonWriter.write(" value;\n\n\tprivate ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
		jamonWriter.write("(");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
		jamonWriter.write(" value)\n\t{\n\t\tthis.value = value;\n\t}\n\n\tpublic ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
		jamonWriter.write(" getValue()\n\t{\n\t\treturn this.value;\n\t}\n		\n		@Override\t\n\tpublic ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemObjectTypeName), jamonWriter);
		jamonWriter.write(" getObjectValue()\n\t{\n				return getValue();\n\t} \n\n\tpublic static ");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
		jamonWriter.write(" getEnumValue(");
		org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
		jamonWriter.write(" value)\n\t{\n\t\t");

		int i = 0;
		for (String curVal : values.keySet() )
		{
			jamonWriter.write("\n\t		");
			Object castValue = values.get(curVal).getCastValue(); if(elemTypeName.equals("BigDecimal")) castValue = "new BigDecimal(\"" + castValue + "\")";
			if (i != 0 )
			{
				jamonWriter.write("else ");
			}
			jamonWriter.write("if ( ");
			if (isPrimitive == true )
			{
				jamonWriter.write("value == ");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
				jamonWriter.write(" ");
			}
			else
			{
				jamonWriter.write("value.equals(");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
				jamonWriter.write(")");
			}
			jamonWriter.write(" )\n\t\t\treturn ");
			org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(curVal), jamonWriter);
			jamonWriter.write(";\n\t\t");
			if (i == values.size() - 1 )
			{
				jamonWriter.write("\n\t\t");
				if (!elemTypeName.equalsIgnoreCase("boolean") )
				{
					jamonWriter.write("\n\t\telse if	( ");
					if (isPrimitive == true )
					{
						jamonWriter.write("value == ");
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						jamonWriter.write(" ");
					}
					else
					{
						jamonWriter.write("value.equals(");
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						jamonWriter.write(")");
					}
					jamonWriter.write(" )\n\t\t\treturn Present;\n\t\t\t\n\t\telse if	( ");
					if (isPrimitive == true )
					{
						jamonWriter.write("value == ");
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						jamonWriter.write(" ");
					}
					else
					{
						jamonWriter.write("value.equals(");
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
						org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
						jamonWriter.write(")");
					}
					jamonWriter.write(" )\n\t\t\treturn Missed;\n\t\t");
				}
				jamonWriter.write("\t\n\t\telse\n\t\t\tthrow new EPSCommonException(\"Incorrect \\\"\" + value + \"\\\" requested in enum ");
				org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
				jamonWriter.write("\");");
			}
			jamonWriter.write("\n\t\t");
		i++;
		}
		jamonWriter.write("\n\t}\n}\n");
	}

}
