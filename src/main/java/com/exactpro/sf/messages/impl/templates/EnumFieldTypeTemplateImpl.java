// Autogenerated Jamon implementation
// /home/mz0/e/sf-compat2/src/main/templates/com/exactpro/sf/messages/impl/templates/EnumFieldTypeTemplate.jamon

package com.exactpro.sf.messages.impl.templates;

// 13, 3
import java.util.Map;
// 14, 3
import java.util.Iterator;
// 15, 3
import com.exactpro.sf.common.messages.structures.IAttributeStructure;
// 16, 3
import com.exactpro.sf.common.impl.messages.IBaseEnumField;

public class EnumFieldTypeTemplateImpl
  extends org.jamon.AbstractTemplateImpl
  implements com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.Intf

{
  private final String packageName;
  private final String enumName;
  private final String elemTypeName;
  private final String elemObjectTypeName;
  private final boolean isPrimitive;
  private final Map<String,IAttributeStructure> values;
  protected static com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData __jamon_setOptionalArguments(com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData p_implData)
  {
    return p_implData;
  }
  public EnumFieldTypeTemplateImpl(org.jamon.TemplateManager p_templateManager, com.exactpro.sf.messages.impl.templates.EnumFieldTypeTemplate.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    packageName = p_implData.getPackageName();
    enumName = p_implData.getEnumName();
    elemTypeName = p_implData.getElemTypeName();
    elemObjectTypeName = p_implData.getElemObjectTypeName();
    isPrimitive = p_implData.getIsPrimitive();
    values = p_implData.getValues();
  }
  
  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 19, 1
    jamonWriter.write("/*\n * Copyright 2009-2018 Exactpro (Exactpro Systems Limited)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage ");
    // 34, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(packageName), jamonWriter);
    // 34, 26
    jamonWriter.write(";\n\nimport java.math.BigDecimal;\n\nimport com.exactpro.sf.common.impl.messages.IBaseEnumField;\nimport com.exactpro.sf.common.util.EPSCommonException;\n\npublic enum ");
    // 41, 13
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
    // 41, 27
    jamonWriter.write(" implements IBaseEnumField\n{\n\t");
    // 43, 2
    
		String quote = "";
		if (elemTypeName.equals("String")) {
			quote="\"";
		} else if (elemTypeName.equals("char")) {
			quote="'";
		}
	
    // 52, 2
    
	String present = "Byte.MAX_VALUE";
	String missed = "Byte.MIN_VALUE";
	if (elemTypeName.equals("String")) {
		present = "*";
		missed = "#";
	} else if (elemTypeName.equals("char")) {
		present = "\000";
		missed = "\001";
	} else if (elemTypeName.equals("byte")) {
		present = "Byte.MAX_VALUE";
		missed = "Byte.MIN_VALUE";
	} else if (elemTypeName.equals("int")) {
		present = "-999";
		missed = "-998";
	} else if (elemTypeName.equals("long")) {
		present = "-999l";
		missed = "-998L";
	} else if (elemTypeName.equals("short")) {
		present = "Short.MAX_VALUE";
		missed = "Short.MIN_VALUE";
	} else if (elemTypeName.equals("double")) {
		present = "-999.0";
		missed = "-998.0";
	} else if (elemTypeName.equals("float")) {
		present = "-999.0f";
		missed = "-998.0f";
	} else if (elemTypeName.equals("BigDecimal")) {
        present = "new BigDecimal(-999)";
        missed = "new BigDecimal(-998)";
    }
	Iterator<String> it = values.keySet().iterator();
	
    // 86, 2
    if (!elemTypeName.equalsIgnoreCase("boolean") )
    {
      // 86, 51
      jamonWriter.write("\n\t");
      // 87, 2
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(IBaseEnumField.PRESENT), jamonWriter);
      // 87, 30
      jamonWriter.write("(");
      // 87, 31
      if (isPrimitive == true)
      {
        // 87, 57
        jamonWriter.write("(");
        // 87, 58
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
        // 87, 76
        jamonWriter.write(") ");
      }
      // 87, 84
      jamonWriter.write(" ");
      // 87, 85
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 87, 96
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
      // 87, 109
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 87, 120
      jamonWriter.write("),\n\t\n\t");
      // 89, 2
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(IBaseEnumField.MISSED), jamonWriter);
      // 89, 29
      jamonWriter.write("(");
      // 89, 30
      if (isPrimitive == true)
      {
        // 89, 56
        jamonWriter.write("(");
        // 89, 57
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
        // 89, 75
        jamonWriter.write(") ");
      }
      // 89, 83
      jamonWriter.write(" ");
      // 89, 84
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 89, 95
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
      // 89, 107
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 89, 118
      jamonWriter.write("),\n\t");
    }
    // 90, 8
    jamonWriter.write("\n\t\n\t");
    // 92, 2
    while (it.hasNext() )
    {
      // 92, 25
      jamonWriter.write("\n\t");
      // 93, 2
      String value = it.next(); Object castValue = values.get(value).getCastValue(); if(elemTypeName.equals("BigDecimal")) castValue = "new BigDecimal(\"" + castValue + "\")";
      // 94, 2
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(value), jamonWriter);
      // 94, 13
      jamonWriter.write("(");
      // 94, 14
      if (isPrimitive == true)
      {
        // 94, 40
        jamonWriter.write("(");
        // 94, 41
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
        // 94, 59
        jamonWriter.write(")");
      }
      // 94, 66
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 94, 77
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
      // 94, 92
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
      // 94, 103
      jamonWriter.write(")");
      // 94, 104
      if (it.hasNext() )
      {
        // 94, 124
        jamonWriter.write(",");
      }
      // 94, 125
      else
      {
        // 94, 132
        jamonWriter.write(";");
      }
      // 94, 139
      jamonWriter.write("\n\t");
    }
    // 95, 11
    jamonWriter.write("\t\n\n\tprivate final ");
    // 97, 16
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
    // 97, 34
    jamonWriter.write(" value;\n\n\tprivate ");
    // 99, 10
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
    // 99, 24
    jamonWriter.write("(");
    // 99, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
    // 99, 43
    jamonWriter.write(" value)\n\t{\n\t\tthis.value = value;\n\t}\n\n\tpublic ");
    // 104, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
    // 104, 27
    jamonWriter.write(" getValue()\n\t{\n\t\treturn this.value;\n\t}\n    \n    @Override\t\n\tpublic ");
    // 110, 9
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemObjectTypeName), jamonWriter);
    // 110, 33
    jamonWriter.write(" getObjectValue()\n\t{\n        return getValue();\n\t} \n\n\tpublic static ");
    // 115, 16
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
    // 115, 30
    jamonWriter.write(" getEnumValue(");
    // 115, 44
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(elemTypeName), jamonWriter);
    // 115, 62
    jamonWriter.write(" value)\n\t{\n\t\t");
    // 117, 3
    
		int i = 0;
		
    // 120, 2
    for (String curVal : values.keySet() )
    {
      // 120, 42
      jamonWriter.write("\n\t    ");
      // 121, 6
      Object castValue = values.get(curVal).getCastValue(); if(elemTypeName.equals("BigDecimal")) castValue = "new BigDecimal(\"" + castValue + "\")";
      // 122, 3
      if (i != 0 )
      {
        // 122, 17
        jamonWriter.write("else ");
      }
      // 122, 28
      jamonWriter.write("if ( ");
      // 122, 33
      if (isPrimitive == true )
      {
        // 122, 60
        jamonWriter.write("value == ");
        // 122, 69
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
        // 122, 80
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
        // 122, 95
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
        // 122, 106
        jamonWriter.write(" ");
      }
      // 122, 107
      else
      {
        // 122, 114
        jamonWriter.write("value.equals(");
        // 122, 127
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
        // 122, 138
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(castValue), jamonWriter);
        // 122, 153
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
        // 122, 164
        jamonWriter.write(")");
      }
      // 122, 171
      jamonWriter.write(" )\n\t\t\treturn ");
      // 123, 11
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(curVal), jamonWriter);
      // 123, 23
      jamonWriter.write(";\n\t\t");
      // 124, 3
      if (i == values.size() - 1 )
      {
        // 124, 33
        jamonWriter.write("\n\t\t");
        // 125, 3
        if (!elemTypeName.equalsIgnoreCase("boolean") )
        {
          // 125, 52
          jamonWriter.write("\n\t\telse if  ( ");
          // 126, 14
          if (isPrimitive == true )
          {
            // 126, 41
            jamonWriter.write("value == ");
            // 126, 50
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 126, 61
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
            // 126, 74
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 126, 85
            jamonWriter.write(" ");
          }
          // 126, 86
          else
          {
            // 126, 93
            jamonWriter.write("value.equals(");
            // 126, 106
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 126, 117
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(present), jamonWriter);
            // 126, 130
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 126, 141
            jamonWriter.write(")");
          }
          // 126, 148
          jamonWriter.write(" )\n\t\t\treturn Present;\n\t\t\t\n\t\telse if  ( ");
          // 129, 14
          if (isPrimitive == true )
          {
            // 129, 41
            jamonWriter.write("value == ");
            // 129, 50
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 129, 61
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
            // 129, 73
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 129, 84
            jamonWriter.write(" ");
          }
          // 129, 85
          else
          {
            // 129, 92
            jamonWriter.write("value.equals(");
            // 129, 105
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 129, 116
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(missed), jamonWriter);
            // 129, 128
            org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(quote), jamonWriter);
            // 129, 139
            jamonWriter.write(")");
          }
          // 129, 146
          jamonWriter.write(" )\n\t\t\treturn Missed;\n\t\t");
        }
        // 131, 9
        jamonWriter.write("\t\n\t\telse\n\t\t\tthrow new EPSCommonException(\"Incorrect \\\"\" + value + \"\\\" requested in enum ");
        // 133, 80
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(enumName), jamonWriter);
        // 133, 94
        jamonWriter.write("\");");
      }
      // 133, 103
      jamonWriter.write("\n\t\t");
      // 134, 3
      
		i++;
		
    }
    // 137, 10
    jamonWriter.write("\n\t}\n}\n");
  }
  
  
}
